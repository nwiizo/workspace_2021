// Protocol Buffers のバージョン。2 と 3 があるが、今からやるなら `proto3` 一択

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: deepthought.proto

// package 指定は必須。HTTP/2 の :path 疑似ヘッダの一部として使われる。

package deepthought

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// BootRequest は Boot RPC のリクエストのメッセージです。
// 現状空ですが、拡張可能にするため定義しておきます。
type BootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BootRequest) Reset() {
	*x = BootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepthought_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootRequest) ProtoMessage() {}

func (x *BootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deepthought_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootRequest.ProtoReflect.Descriptor instead.
func (*BootRequest) Descriptor() ([]byte, []int) {
	return file_deepthought_proto_rawDescGZIP(), []int{0}
}

//*
// BootResponse は Boot RPC のレスポンスのメッセージです。
type BootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // フィールドには 1 以上の整数の識別子が必要です
}

func (x *BootResponse) Reset() {
	*x = BootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepthought_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootResponse) ProtoMessage() {}

func (x *BootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepthought_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootResponse.ProtoReflect.Descriptor instead.
func (*BootResponse) Descriptor() ([]byte, []int) {
	return file_deepthought_proto_rawDescGZIP(), []int{1}
}

func (x *BootResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// InferRequest は Infer RPC のリクエストのメッセージです。
type InferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *InferRequest) Reset() {
	*x = InferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepthought_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferRequest) ProtoMessage() {}

func (x *InferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deepthought_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferRequest.ProtoReflect.Descriptor instead.
func (*InferRequest) Descriptor() ([]byte, []int) {
	return file_deepthought_proto_rawDescGZIP(), []int{2}
}

func (x *InferRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

//*
// InferResponse は Infer RPC のレスポンスのメッセージです。
type InferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer      int64    `protobuf:"zigzag64,1,opt,name=answer,proto3" json:"answer,omitempty"`        // sint は符号付きの整数で、負の数を効率よくエンコードしてくれます
	Description []string `protobuf:"bytes,2,rep,name=description,proto3" json:"description,omitempty"` // repeated を付けると配列を渡せます
}

func (x *InferResponse) Reset() {
	*x = InferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepthought_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferResponse) ProtoMessage() {}

func (x *InferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepthought_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferResponse.ProtoReflect.Descriptor instead.
func (*InferResponse) Descriptor() ([]byte, []int) {
	return file_deepthought_proto_rawDescGZIP(), []int{3}
}

func (x *InferResponse) GetAnswer() int64 {
	if x != nil {
		return x.Answer
	}
	return 0
}

func (x *InferResponse) GetDescription() []string {
	if x != nil {
		return x.Description
	}
	return nil
}

var File_deepthought_proto protoreflect.FileDescriptor

var file_deepthought_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x65, 0x70, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x22, 0x0d, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x28, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x49, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x88, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x74,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x60, 0x0a, 0x2c, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x79, 0x6d, 0x6d, 0x74, 0x32, 0x30, 0x30, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x74, 0x68,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x6d, 0x6d, 0x74, 0x32, 0x30, 0x30, 0x35, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x65, 0x70,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deepthought_proto_rawDescOnce sync.Once
	file_deepthought_proto_rawDescData = file_deepthought_proto_rawDesc
)

func file_deepthought_proto_rawDescGZIP() []byte {
	file_deepthought_proto_rawDescOnce.Do(func() {
		file_deepthought_proto_rawDescData = protoimpl.X.CompressGZIP(file_deepthought_proto_rawDescData)
	})
	return file_deepthought_proto_rawDescData
}

var file_deepthought_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_deepthought_proto_goTypes = []interface{}{
	(*BootRequest)(nil),   // 0: deepthought.BootRequest
	(*BootResponse)(nil),  // 1: deepthought.BootResponse
	(*InferRequest)(nil),  // 2: deepthought.InferRequest
	(*InferResponse)(nil), // 3: deepthought.InferResponse
}
var file_deepthought_proto_depIdxs = []int32{
	0, // 0: deepthought.Compute.Boot:input_type -> deepthought.BootRequest
	2, // 1: deepthought.Compute.Infer:input_type -> deepthought.InferRequest
	1, // 2: deepthought.Compute.Boot:output_type -> deepthought.BootResponse
	3, // 3: deepthought.Compute.Infer:output_type -> deepthought.InferResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_deepthought_proto_init() }
func file_deepthought_proto_init() {
	if File_deepthought_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deepthought_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepthought_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepthought_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepthought_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deepthought_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deepthought_proto_goTypes,
		DependencyIndexes: file_deepthought_proto_depIdxs,
		MessageInfos:      file_deepthought_proto_msgTypes,
	}.Build()
	File_deepthought_proto = out.File
	file_deepthought_proto_rawDesc = nil
	file_deepthought_proto_goTypes = nil
	file_deepthought_proto_depIdxs = nil
}
