// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package deepthought

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeClient is the client API for Compute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeClient interface {
	// Compute は Boot した瞬間に思考を始めるのでキャンセルするまでレスポンスを stream し続けます。
	// リクエスト・レスポンスのメッセージは省略できません。
	// `stream` がレスポンスについているので、この RPC はサーバーサイドストリーミングになります。
	Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (Compute_BootClient, error)
	// Infer は任意の質問に解答してくれます。
	// 質問が Life, Universe, Everything に関する場合 750 万年、もとい 750 ミリ秒の計算を必要とします。
	// この RPC はメッセージに `stream` がついていないので、Unary RPC です。
	Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error)
}

type computeClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeClient(cc grpc.ClientConnInterface) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (Compute_BootClient, error) {
	stream, err := c.cc.NewStream(ctx, &Compute_ServiceDesc.Streams[0], "/deepthought.Compute/Boot", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeBootClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Compute_BootClient interface {
	Recv() (*BootResponse, error)
	grpc.ClientStream
}

type computeBootClient struct {
	grpc.ClientStream
}

func (x *computeBootClient) Recv() (*BootResponse, error) {
	m := new(BootResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeClient) Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error) {
	out := new(InferResponse)
	err := c.cc.Invoke(ctx, "/deepthought.Compute/Infer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServer is the server API for Compute service.
// All implementations must embed UnimplementedComputeServer
// for forward compatibility
type ComputeServer interface {
	// Compute は Boot した瞬間に思考を始めるのでキャンセルするまでレスポンスを stream し続けます。
	// リクエスト・レスポンスのメッセージは省略できません。
	// `stream` がレスポンスについているので、この RPC はサーバーサイドストリーミングになります。
	Boot(*BootRequest, Compute_BootServer) error
	// Infer は任意の質問に解答してくれます。
	// 質問が Life, Universe, Everything に関する場合 750 万年、もとい 750 ミリ秒の計算を必要とします。
	// この RPC はメッセージに `stream` がついていないので、Unary RPC です。
	Infer(context.Context, *InferRequest) (*InferResponse, error)
	mustEmbedUnimplementedComputeServer()
}

// UnimplementedComputeServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServer struct {
}

func (UnimplementedComputeServer) Boot(*BootRequest, Compute_BootServer) error {
	return status.Errorf(codes.Unimplemented, "method Boot not implemented")
}
func (UnimplementedComputeServer) Infer(context.Context, *InferRequest) (*InferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infer not implemented")
}
func (UnimplementedComputeServer) mustEmbedUnimplementedComputeServer() {}

// UnsafeComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServer will
// result in compilation errors.
type UnsafeComputeServer interface {
	mustEmbedUnimplementedComputeServer()
}

func RegisterComputeServer(s grpc.ServiceRegistrar, srv ComputeServer) {
	s.RegisterService(&Compute_ServiceDesc, srv)
}

func _Compute_Boot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServer).Boot(m, &computeBootServer{stream})
}

type Compute_BootServer interface {
	Send(*BootResponse) error
	grpc.ServerStream
}

type computeBootServer struct {
	grpc.ServerStream
}

func (x *computeBootServer) Send(m *BootResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Compute_Infer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).Infer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deepthought.Compute/Infer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).Infer(ctx, req.(*InferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compute_ServiceDesc is the grpc.ServiceDesc for Compute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deepthought.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Infer",
			Handler:    _Compute_Infer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Boot",
			Handler:       _Compute_Boot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deepthought.proto",
}
